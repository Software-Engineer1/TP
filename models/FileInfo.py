import os
import time
from datetime import datetime

from PIL import Image
from PIL.ExifTags import TAGS, GPSTAGS

from generalcommands import naming

try:
    from configparser import ConfigParser
except:
    from six.moves import configparser


class FileInfo():
    file_info = None
    import_mode = None
    modified_date = None
    fullpath = None
    folder = None
    database_folder = None
    original_date = None
    original_size = None
    import_date = None
    modified_date = None
    tags = None
    edited = None
    original_file = None
    owner = None
    export = None
    orientation = None
    rename = None
    longitude = None
    latitude = None

    def __init__(self, file_info, import_mode=False, modified_date=False):
        """Reads a photo file and determines all the basic information about it.
              Will attempt to read info files generated by Google's Picasa or by this program, other information is read directly
              from the file.

              Arguments:
                  file_info: A list containing file information:
                      Relative path to the file from the screenDatabase directory
                      Database root directory
                  import_mode: When reading the file from a camera or other import source, don't try to find any info files.
                  modified_date: if this is already found, can be passed in to save time

              Returns: None
           """
        self.file_info = file_info
        self.import_mode = import_mode
        self.modified_date = modified_date
        self.__extractPhotoInfo()




    def photoInfo(self):
        return [
            self.fullpath,
            self.folder,
            self.database_folder,
            self.original_date,
            self.original_size,
            self.import_date,
            self.modified_date,
            self.tags,
            self.edited,
            self.original_file,
            self.owner,
            self.export,
            self.orientation,
        ]


  #
  # def get_exif_data(self, image):
  #       """Returns a dictionary from the exif data of an PIL Image item. Also converts the GPS Tags"""
  #       exif_data = {}
  #       info = image._getexif()
  #       if info:
  #           for tag, value in info.items():
  #               decoded = TAGS.get(tag, tag)
  #               if decoded == "GPSInfo":
  #                   gps_data = {}
  #                   for t in value:
  #                       sub_decoded = GPSTAGS.get(t, t)
  #                       gps_data[sub_decoded] = value[t]
  #
  #                   exif_data[decoded] = gps_data
  #               else:
  #                   exif_data[decoded] = value
  #
  #       return exif_data
  #   def get_lat_lon(self,exif_data):
  #       """Returns the latitude and longitude, if available, from the provided exif_data (obtained through get_exif_data above)"""
  #       lat = None
  #       lon = None
  #
  #       if "GPSInfo" in exif_data:
  #           gps_info = exif_data["GPSInfo"]
  #
  #           gps_latitude = self._get_if_exist(gps_info, "GPSLatitude")
  #           gps_latitude_ref = self._get_if_exist(gps_info, 'GPSLatitudeRef')
  #           gps_longitude = self._get_if_exist(gps_info, 'GPSLongitude')
  #           gps_longitude_ref = self._get_if_exist(gps_info, 'GPSLongitudeRef')
  #
  #           if gps_latitude and gps_latitude_ref and gps_longitude and gps_longitude_ref:
  #               lat = self._convert_to_degress(gps_latitude)
  #               if gps_latitude_ref != "N":
  #                   lat = 0 - lat
  #
  #               lon = self._convert_to_degress(gps_longitude)
  #               if gps_longitude_ref != "E":
  #                   lon = 0 - lon
  #
  #       return lat, lon